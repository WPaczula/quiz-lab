{"version":3,"file":"useLocalSyncConsumer-Bs1iP9Pl.js","sources":["../lib/hooks/useLocalSyncService.ts","../lib/hooks/useLocalSyncConsumer.ts"],"sourcesContent":["import { LocalSyncServiceContext } from \"../contexts/LocalSyncServiceContext/context\";\nimport { useContext } from \"react\";\n\nexport const useLocalSyncService = () => {\n  const context = useContext(LocalSyncServiceContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useLocalSyncService must be used within a LocalSyncServiceProvider\",\n    );\n  }\n  return context;\n};\n","import { useEffect, useRef } from \"react\";\nimport {\n  SyncReceiveCallback,\n  SyncReceiveDefinitionNames,\n} from \"../services/types\";\nimport { useLocalSyncService } from \"./useLocalSyncService\";\n\nexport const useLocalSyncConsumer = <T extends SyncReceiveDefinitionNames>(\n  name: T,\n  key: string,\n  callback: SyncReceiveCallback<T>,\n) => {\n  const { onSync, offSync } = useLocalSyncService();\n  const callbackRef = useRef<SyncReceiveCallback<T>>();\n  useEffect(() => {\n    callbackRef.current = callback;\n    onSync(name, callback, key);\n    return () => {\n      if (callbackRef.current) {\n        offSync(name, key);\n      }\n    };\n  }, [callback, key, name, offSync, onSync]);\n};\n"],"names":["useLocalSyncService","context","useContext","LocalSyncServiceContext","useLocalSyncConsumer","name","key","callback","onSync","offSync","callbackRef","useRef","useEffect"],"mappings":";;AAGO,MAAMA,IAAsB,MAAM;AACjC,QAAAC,IAAUC,EAAWC,CAAuB;AAClD,MAAIF,MAAY;AACd,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAEK,SAAAA;AACT,GCJaG,IAAuB,CAClCC,GACAC,GACAC,MACG;AACH,QAAM,EAAE,QAAAC,GAAQ,SAAAC,EAAQ,IAAIT,EAAoB,GAC1CU,IAAcC,EAA+B;AACnD,EAAAC,EAAU,OACRF,EAAY,UAAUH,GACfC,EAAAH,GAAME,GAAUD,CAAG,GACnB,MAAM;AACX,IAAII,EAAY,WACdD,EAAQJ,GAAMC,CAAG;AAAA,EAErB,IACC,CAACC,GAAUD,GAAKD,GAAMI,GAASD,CAAM,CAAC;AAC3C;"}